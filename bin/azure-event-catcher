#!/usr/bin/env ruby

lib = File.expand_path("../../lib", __FILE__)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)

STDOUT.sync = true

require "bundler/setup"
require "topological_inventory/azure/event_catcher"

def parse_args
  require 'optimist'
  opts = Optimist::options do
    opt :source, "Inventory Source UID", :type => :string, :required => ENV["SOURCE_UID"].nil?, :default => ENV["SOURCE_UID"]
    opt :region, "AWS region", :type => :string, :required => ENV["REGION"].nil?, :default => ENV["REGION"]
    opt :access_key_id, "Secret access key for the AWS API access", :type => :string, :required => ENV["ACCESS_KEY_ID"].nil?, :default => ENV["ACCESS_KEY_ID"]
    opt :secret_access_key, "Secret access key for the AWS API access", :type => :string, :required => ENV["SECRET_ACCESS_KEY"].nil?, :default => ENV["SECRET_ACCESS_KEY"]
    opt :sns_topic, "AWS SNS topic having events written into", :type => :string, :required => ENV["SNS_TOPIC"].nil?, :default => ENV["SNS_TOPIC"]
    opt :queue_host, "Hostname of the output event stream queue", :type => :string, :required => ENV["QUEUE_HOST"].nil?, :default => ENV["QUEUE_HOST"]
    opt :queue_port, "Port of the output event stream queue", :type => :string, :required => ENV["QUEUE_PORT"].nil?, :default => ENV["QUEUE_PORT"]
  end

  opts
end

args = parse_args

collector = TopologicalInventory::Azure::EventCatcher.new(
  args[:source],
  args[:region],
  args[:access_key_id],
  args[:secret_access_key],
  args[:sns_topic],
  args[:queue_host],
  args[:queue_port]
)
collector.monitor_events!
