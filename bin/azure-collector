#!/usr/bin/env ruby

lib = File.expand_path('../lib', __dir__)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)

STDOUT.sync = true

require "bundler/setup"
require "topological_inventory/azure/collector"
require "topological_inventory/azure/collectors_pool"
require "topological_inventory/azure/collector/metrics"

def parse_args
  require 'optimist'
  opts = Optimist.options do
    opt :config, "Sources configuration YAML file",
        :type => :string, :default => ENV["CONFIG"]
    opt :source, "Inventory Source UID",
        :type => :string, :default => ENV["SOURCE_UID"]
    opt :client_id, "Secret access key for the Azure API access",
        :type => :string, :default => ENV["AUTH_USERNAME"]
    opt :client_secret, "Secret access key for the Azure API access",
        :type => :string, :default => ENV["AUTH_PASSWORD"]
    opt :tenant_id, "Tenant ID of the Azure API access",
        :type => :string, :default => ENV["AUTH_TENANT_ID"]
    opt :ingress_api, "Hostname of the ingress-api route",
        :type => :string, :default => ENV["INGRESS_API"] || "http://localhost:9292"
    opt :metrics_port, "Port to expose the metrics endpoint on, 0 to disable metrics",
        :type => :integer, :default => (ENV["METRICS_PORT"] || 9394).to_i
  end

  opts
end

# Params for single-source mode and multi-source mode are mutually exclusive
def check_mode(opts)
  single_source_args = %i[source client_id client_secret tenant_id]
  if opts[:config].nil?
    single_source_args.each do |arg|
      Optimist::die arg, "can't be nil" if opts[arg].nil?
    end
  else
    Optimist::die :config, "not applicable in single-source mode" if single_source_args.any? { |arg| opts[arg].present? }
  end
end

args = parse_args

check_mode(args)

ingress_api_uri = URI(args[:ingress_api])

TopologicalInventoryIngressApiClient.configure.scheme = ingress_api_uri.scheme || "http"
TopologicalInventoryIngressApiClient.configure.host   = "#{ingress_api_uri.host}:#{ingress_api_uri.port}"

metrics = TopologicalInventory::Azure::Collector::Metrics.new(args[:metrics_port])

Signal.trap("TERM") do
  metrics.stop_server
  exit
end

if args[:config].nil?
  collector = TopologicalInventory::Azure::Collector.new(
    args[:source], args[:client_id], args[:client_secret], args[:tenant_id], metrics
  )
  collector.collect!
else
  pool = TopologicalInventory::Azure::CollectorsPool.new(args[:config], metrics)
  pool.run!
end
